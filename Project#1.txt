Project1 (check automatic trigger of pipelines when you make some change in your git repo add file and trigger webhook)

STEP1: Createing 3 VMs installing Ansible and making them in Ansible Cluster

- Created 3 EC2 VMs in AWS master, test, prod
- Connected to all three EC2 and ran following command to update binaries and libraries
   $ sudo apt update
- Installed Ansible on master EC2 following following commands. 
    $ sudo apt update
	$ sudo apt install software-properties-common
	$ sudo add-apt-repository --yes --update ppa:ansible/ansible
	$ sudo apt install ansible
- Checked Ansible version with $ ansible --version
- Generated pub key with command $ ssh-keygen   OR  ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa
- cat to .pub location from above to get pub keyvalue

    ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCp5arRE7VvzabnX8OOaE72VT0erFN2INIiRDSsvqJ2dB50h9lSzxB3oCiN/
	dGol8mb89iNDHsSEQZS3lSUTq4/2CI+S2l2pV1DHbMOhKa8xmpajGmFzhbY9rPHeJzNKuxKQImlACpRzclstpSRxOUZGRWoE8tloUvXNYvwkkKYU7N+
	SCsG4qsLBg7zCgzHbJrkvcUEYeHxUJ5KYtdWpJb/hOrWJt3gwXgMutiKUdCaq33AIRL2AN825dZuNFuxFaYACsGTO80NsiSPBXsxBQ/9PA1z9WPebYdZFfeJSs8jrxep78/
	Zr+9yqytGoho4L36svWcG0V0NvAkjGjYQsL3TpZXRgQTZpK7Sg2dHV+kJIU1+U6JaTj2XuFBMUykLOiNIScIarKtC95ebF0NTqB/CCtbWXkLOWw3DWEPhQd6QDfvjvlk/TUDtS/
	AwUQfNAJrTf5c+BxFmimYhEhtw1e2i2JPuL6aEtLrGOyTNuqK8PTawCnyGvkypU06RHfqSN50= ubuntu@ip-172-31-16-186

- Copy pub key and go to test, prod VMs and type in 
	$ cd .ssh
	$sudo nano authorized_keys (paste it under and save and exit)
- In master VM go to following
	$ cd /etc/ansible/hosts (enter hosts valus as below then save and exit)
	[test]
	172.31.84.72

	[prod]
	172.31.80.215
- from master vm ping all to make sure they are pingable with following
	$ ansible -m ping all (# you should get SUCCESS)

NOTE: create the ssh-keygen as default without  giving any filenames at the time of creation of pub keys so that it goes to default  "/home/ubuntu/.ssh" folder.
##################################################################################################################################
STEP2: Install Jenkins, Java, Docker in Master & Install Java , Docker in Test and Prod EC2. for this to accomplish
Creating install.YAML file, Jenkins.sh , docker.sh files to install Jenkins, Java, Docker in master & Java,Docker in Test and Prod VMs. 

- on master VM do
NOTE: Build the following files on master vm and inside /etc/ansible folder.

	$ sudo nano install.yaml (#and enter following)
---
- hosts: localhost
  become: true
  name: install Jenkins, Java and Docker
  tasks:
  - name: master task
    script: jenkins.sh
- hosts: test
  become: true
  name: install Java and Docker
  tasks:
  - name: test task
    script: docker.sh
- hosts: prod
  become: true
  name: install Java and Docker
  tasks:
  - name: prod task
    script: docker.sh
	--------------------------
	$ sudo nano jenkins.sh (#and enter following)
	
sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
https://pkg.jenkins.io/debian/jenkins.io-2023.key
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
https://pkg.jenkins.io/debian binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install openjdk-17-jdk -y
sudo apt-get install docker.io -y
sudo apt-get install jenkins -y
	-----------------------------------
	$ sudo nano docker.sh (#and enter following)
	
sudo apt-get update
sudo apt-get install openjdk-17-jdk -y
sudo apt-get install docker.io -y
	---------------------------------------
- run following --syntax-check command to check any syntax erros in install.YAML file
	$ ansible-playbook install.yaml --syntax-check
- run dry run without installing first with following command on master VM
	$ ansible-playbook install.yaml --check
- if both above passed then run the actual install with following command
	@ ansible-playbook install.yaml
	------------------------------------------
- Check Versions of jenkins, Java and docker on master VM and java, docker versions on test and prod VMs.
	$ jenkins --version
	$ java --version
	$ docker --version
	
- Open Jenkins dashboard using master VM public ip:8080 port like mastervmpublicip:8080  (open this port on security group for master vm before doing this)
	$ sudo cat /var/lib/jenkins/secrets/initialAdminPassword


################################################################################################################################
NOTE: If you have any issues opening Jenkins dashboard some troubleshoot below or else NOT needed.
  
  $ sudo apt update
  $ sudo apt install openjdk-17-jdk -y (install java openjdk-17-jdk)
  $ sudo systemctl status jenkins  ( to see if jenkins is running)
  $ sudo systemctl restart jenkins  ( to restart jenkins)
  $ sudo journalctl -u jenkins | grep 'java' (check jenkins logs)
  $ sudo update-alternatives --config java (This will list all installed Java versions)
Modify Jenkins Service to Use OpenJDK 17, Edit the Jenkins Service File:
	sudo nano /etc/default/jenkins
Set the JAVA_HOME Environment Variable: Find and update (or add if missing) the JAVA_HOME variable to point to OpenJDK 17:
	JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
Replace the path above with the correct path to OpenJDK 17 on your system. You can confirm the path with:
	sudo update-alternatives --config java
Save and Exit: Press Ctrl+O to save and Ctrl+X to exit the editor
Verify Jenkins is Using OpenJDK 17 with following
	ps -aux | grep jenkins
NOTE: I had an issue with opening jenkins dashboard then I added above in jenkins file also I added inbound rule to 
EC2 instance in and go to security tab to allow tcp 8080 for 0.0.0.0/0 for all inbout connections. 

########################################################################################################################
STEP3: Configuring Jenkins - Adding both test and prod nodes into Jenkins
Note: use internal ips of the servers while adding nodes in Jenkins console. open tcp port 8080 for these EC2 in AWS.

1) Login to Jenkins and Go to Managed Jenkins -> Nodes ->  give name of node server you want to add.
2) Remote Root Directory Path is : /home/ubuntu/jenkins   - this is where jenkins files are stored on this node server.
3) Launch Method: Launch agents via SSH
4) Host: private IP address of node server
5) Host Key Verification Strategy: Non verifying verification strategy
6) Create Credentials: add credentials jenkins
                   	  Kind: SSH username with private key
		    	 username: username of slave machine do whoami get username "ubuntu" 
			Private Key: copy and paste .pem file contents into the box below.

     Note: select credentials in dropdown once created. 
		
##############################################################################################
STEP4: Create new Git Repo
1) login to Git hub account and create new repo with two branches main and develop.
2) create a txt file with name main.txt with text "This is main.txt created for main branch"
2) Create a txt file with name develop.txt with text "This is develop.txt created in develop branch"

#############################################################################################
STEP5: PIPELINE creation Work Flow in Jenkins 
job1 -> test -> fetch from develop branch
job2 -> prod -> fetch from master branch
job3 -> j1 trigger j2
-------------------------------------------
Job creation workflow
1) New Item create enter job1 (freestyle project)
2) Restrict where this project to run on dev vm
3) Source code management select Git and copy and paste https URL of your repository
4) Branches to build in Branch specifier mention */develop
5) then save and build the job
if build successful my vm gets new folder with jenkins/workspace/job1 name which has files respective to my particular job


#################################################################################################

STEP6 : CREATING WEBHOOK for auto deployments after code commit
1) Select Github hook trigger - enable to get triggers enabled for webhook both in Jenkins.
2)  in Git hub repo go to repo and settings and webhooks on left hand and in webhook payload URL : copy paste your jenkins url:8080/github-webhook/  (# then Add webhook)

Note: it should show you green check mark if it connects to jenkins if not it gives you some error. 

#####################################################################################################


  
	

