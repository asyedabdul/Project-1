Intellipat Capstone project1 (check automatic trigger of pipelines when you make some change in your git repo add file and trigger webhook)
STEP1: Createing 3 VMs installing Ansible and making them in Ansible Cluster

- Created 3 EC2 VMs in AWS master, test, prod
- Connected to all three EC2 and ran following command to update binaries and libraries
   $ sudo apt update
- Installed Ansible on master EC2 following following commands. 
    $ sudo apt update
	$ sudo apt install software-properties-common
	$ sudo add-apt-repository --yes --update ppa:ansible/ansible
	$ sudo apt install ansible
- Checked Ansible version with $ansible --version
- Generated pub key with command $ ssh-keygen   OR  ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa
- cat to .pub location from above to get pub keyvalue
    ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCp5arRE7VvzabnX8OOaE72VT0erFN2INIiRDSsvqJ2dB50h9lSzxB3oCiN/
	dGol8mb89iNDHsSEQZS3lSUTq4/2CI+S2l2pV1DHbMOhKa8xmpajGmFzhbY9rPHeJzNKuxKQImlACpRzclstpSRxOUZGRWoE8tloUvXNYvwkkKYU7N+
	SCsG4qsLBg7zCgzHbJrkvcUEYeHxUJ5KYtdWpJb/hOrWJt3gwXgMutiKUdCaq33AIRL2AN825dZuNFuxFaYACsGTO80NsiSPBXsxBQ/9PA1z9WPebYdZFfeJSs8jrxep78/
	Zr+9yqytGoho4L36svWcG0V0NvAkjGjYQsL3TpZXRgQTZpK7Sg2dHV+kJIU1+U6JaTj2XuFBMUykLOiNIScIarKtC95ebF0NTqB/CCtbWXkLOWw3DWEPhQd6QDfvjvlk/TUDtS/
	AwUQfNAJrTf5c+BxFmimYhEhtw1e2i2JPuL6aEtLrGOyTNuqK8PTawCnyGvkypU06RHfqSN50= ubuntu@ip-172-31-16-186
- Copy pub key and go to test, prod VMs and type in 
	$ cd .ssh and do 
	$sudo nano authorized_keys (paste it under and save and exit)
- In master VM go to following
	$ cd /etc/ansible/hosts (enter hosts valus as below then save and exit)
	[test]
	172.31.84.72

	[prod]
	172.31.80.215
- from master vm ping all to make sure they are pingable with following
	$ ansible -m ping all you should get SUCCESS.
	
##################################################################################################################################
STEP2: Install Jenkins, Java, Docker in Master & Install Java , Docker in Test and Prod EC2. for this to accomplish
Creating install.YAML file, Jenkins.sh , docker.sh files to install Jenkins, Java, Docker in master & Java,Docker in Test and Prod VMs. 

- on master VM do
	$ sudo nano install.YAML and enter following.
---
- hosts: localhost
  become: true
  name: install Jenkins, Java and Docker
  tasks:
  - name: master task
    script: jenkins.sh
- hosts: test
  become: true
  name: install Java and Docker
  tasks:
  - name: test task
    script: docker.sh
- hosts: prod
  become: true
  name: install Java and Docker
  tasks:
  - name: prod task
    script: docker.sh
	--------------------------
	$ sudo nano jenkins.sh and enter following
	
sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
https://pkg.jenkins.io/debian/jenkins.io-2023.key
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
https://pkg.jenkins.io/debian binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install openjdk-17-jdk -y
sudo apt-get install docker.io -y
sudo apt-get install jenkins -y
	-----------------------------------
	$sudo nano docker.sh and enter following
	
sudo apt-get update
sudo apt-get install openjdk-17-jdk -y
sudo apt-get install docker.io -y
	---------------------------------------
- run following --syntax-check command to check any syntax erros in install.YAML file
	$ansible-playbook install.YAML --syntax-check
- run dry run without installing first with following command on master VM
	$ansible-playbook install.YAML --check
- if both above passed then run the actual install with following command
	@ansible-playbook install.YAML
	------------------------------------------
- Check Versions of jenkins, Java and docker on master VM and java, docker versions on test and prod VMs.
	$ jenkins --version
	$ java --version
	$ docker --version
	
- Open Jenkins dashboard using master VM public ip:8080 port number in your browser and copy location of the password and grab the password from 
  master VM and login to jenkins dashboard. If you have any issues opening Jenkins dashboard some troubleshoot below
  
  $ sudo apt update
  $ sudo apt install openjdk-17-jdk -y (install java openjdk-17-jdk)
  $ sudo systemctl status jenkins  ( to see if jenkins is running)
  $ sudo systemctl restart jenkins  ( to restart jenkins)
  $ sudo journalctl -u jenkins | grep 'java' (check jenkins logs)
  $ sudo update-alternatives --config java (This will list all installed Java versions)
Modify Jenkins Service to Use OpenJDK 17, Edit the Jenkins Service File:
	sudo nano /etc/default/jenkins
Set the JAVA_HOME Environment Variable: Find and update (or add if missing) the JAVA_HOME variable to point to OpenJDK 17:
	JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
Replace the path above with the correct path to OpenJDK 17 on your system. You can confirm the path with:
	sudo update-alternatives --config java
Save and Exit: Press Ctrl+O to save and Ctrl+X to exit the editor
Verify Jenkins is Using OpenJDK 17 with following
	ps -aux | grep jenkins
NOTE: I had an issue with opening jenkins dashboard then I added above in jenkins file also I added inbound rule to 
EC2 instance in and go to security tab to allow tcp 8080 for 0.0.0.0/0 for all inbout connections. 

########################################################################################################################
STEP3: Add both test and prod nodes into Jenkins
Note: use internal ips of the servers while adding nodes in Jenkins console. open tcp port 8080 for these EC2 in AWS.


##############################################################################################
STEP4: Clone Git repo with master to have website files from git. Git repo address: https://github.com/asyedabdul/website

Login to master EC2 and run following
	$ sudo git clone https://github.com/asyedabdul/website
	
	


###############################################################################################
STEP5: Create following "Dockerfile" on master VM (at git location) and create two pipelines one Run test and one pipeline in prod.
   
       $sudo nano Dockerfile
FROM ubuntu
RUN apt update
RUN apt install apache2 -y
ADD . /var/www/html
ENTRYPOINT apachectl -D FOREGROUND

then add to master branch with following git commands

	$ git status
	$ git add Dockerfile
	$ git commit -m "add Dockerfile to master branch"
	$ git status - you should see tree is clean
	$ git branch
	    *master
	$ git branch develop
	$ git branch
		develop
		*master
	$ git branch checkout develop
	$ git merge master
	$ git push origin --all (this will push all to github repository but it asks credentials and here you have to create Token for password.)
	$ git branch -r  (Check Remote Branches)
	$ git checkout develop (Switch to the develop Branch, If the develop branch already exists locally)
If it doesnâ€™t exist locally:	$ git checkout -b develop origin/develop
	$ git pull origin develop (Pull the Latest Changes from the Remote develop Branch Ensure your local branch is up-to-date)
	$ git branch (Verify the Branch Confirm you are on the develop branch:)
==========================================================================================
  I assume you have ONLY Master branch both in your local and on git hub (remote).
Also i assume you already connected from local bash to remote git hub using your credentials or git hub token. 
also you cloned the remote repo already to local.

Following code to accomplish following.
1) I created develop branch in local and merge master code into develop and push it to remote. you should see develop branch in remote.
2) Moved to develop branch locally and made code change in index.html file and commit changes locally and push it to remote develop branch.
3) Moved to master branch and merge changes from develop to master locally and commit to local master and push it to remote master. 
    now you should see the same code in develop and master.
  
  328  git status      # check status
  329  git branch		# check your branches all exists and match to origin that is git hub
  330  git checkout -b develop  #If develop does not exists locally create develop branch and point to develop branch
  331  git branch  		# to see which branch you are on 
  333  git status 		# to see if you branch tree is clean
  334  git add .		# merging process starts with this command - adding master branch upto date files to develop branch
  335  git commit -m "commit to develop branch" # commiting all what you have in master to develop branch
  336  git push -u origin develop # pushing all code to remote develop branch
  337  git branch -r	# checking remote branches and you can match it with local branches to be same.
  338  ls
  339  nano index.html  # made some change to code here to index.html file as an example.
  340  git branch		# make sure you are in develop branch to make changes first to push to develop branch in remote then testing.
  341  git status		# to know status optional
  342  git add .		# adding changes of code of index.html file to develop branch	
  344  git commit -m "removed code from index.html in develop branch"  # commiting the code changes to develop branch in local
  345  git push -u origin develop	# pushing changes to develop branch. here -u is to connect upstream to local to remote develop branch
                                      now if you go to github you should only see code changes in develop branch
  346  git checkout master # changes to master branch now in local
  347  git merge develop    # now merge latest code of develop to master with this
  348  git add .			# add changes to current local master branch
  349  git commit		# commit changes to master branch, now it master is ready to upsh to remote git hub master branch and prod deployment
  351  git push -u origin master  # pushing latest changes of master to remote. now you should see develop code into master. 
======================================================================================================

---- NOTES on GIT Merging from Develop branch to master
Following work flow work assuming you have Master and Develop branches in your local and on git hub (remote).
Also create a token in Git Hub portal to authenticate your local git repose to git hub (remote) repos. 

git config --global user.name "Your Name"
git config --global user.email "youremail@example.com"

git clone https://<TOKEN>@github.com/username/repository.git    # first time clone remote repo to local replace token and username and repo name
                                                                   If successful, Git will not ask for a password, and the repository will b
git config --global credential.helper manager					# Run the following command to cache credentials.
git config --global --get credential.helper						# Check if Git is using the Credential Manager:If it returns empty, run:
git config --global credential.helper manager
git credential-manager clear									# Manually clear cached credentials (if incorrect credentials were saved):
git fetch origin            # Get the latest changes from the remote
git checkout master         # Switch to the master branch
git pull origin master       # Update your local master branch from remote master(if you want it optional)
git status - you should see tree is clean
	$ git branch
	    *master
	$ git branch develop
	$ git branch
		develop
		*master
	$ git branch checkout develop
	$ git merge master
	$ git push origin --all (this will push all to github repository but it asks credentials and here you have to create Token for password.)
	$ git branch -r  (Check Remote Branches)
	$ git checkout develop (Switch to the develop Branch, If the develop branch already exists locally)
If it doesnâ€™t exist locally:	$ git checkout -b develop origin/develop
	$ git pull origin develop (Pull the Latest Changes from the Remote develop Branch Ensure your local branch is up-to-date)
	$ git branch (Verify the Branch Confirm you are on the develop branch:)
git merge develop            # Merge develop branch into master
# Resolve conflicts if needed
git add <resolved-file>      # Stage resolved files
git commit                   # Complete the merge
git push origin master       # Push changes to the remote master branch


- to Create Token on GitHub go to profile > settings>Left hand side bottom Developer settings>Personal Access Tokens>Tokens(classi)>put a Note and 
    select all check boxes underneath and select expiration as never expire and generate Token. Save the password for you to use when doing
	git push from EC2 instance.
	
		
- Go to Jenkins and create new Item "job1" select freestyle and fillout following parameters to create pipeline. 

Select GitHub project > Enter Project url https://github.com/asyedabdul/website.git/
Select Restrict where this project can be run> in Label Expression select EC2 instance or Environment that is test in first pipeline and prod in second
        where you want to run this pipeline.
In SourceCodeManagement Select Git> Repository URL same thing as above https://github.com/asyedabdul/website.git
credentials none
In BranchestoBuild > Branch Specifier (blank for 'any')>*/develop (as you building from develop branch)
Select GitHub hook trigger for GITScm polling in Triggers and follow below step to creating WEBHOOK in github to work with this option.

- Creating Triggers when ever developer push some thing pipeline shoud trigger automatically for this Enable "GitHub hook trigger for GITScm polling" 
when creating job also enable on the develop branch in github -> settings -> WEBHOOK and give payload url of Jenkins as below  
      http://34.205.72.23:8080/github-webhook/

In Build Steps> Select Execute shell and Following script at Build job (container) 
NOTE: You have to allow 8080 in inbout security rules on instance level on test EC2 instance.

  - this command to remove previously built containers or else it will throw error port already in use.
sudo docker rm -f $(sudo docker ps -a -q) 
sudo docker build /home/ubuntu/jenkins/workspace/job1 -t developapp
sudo docker run -it -d -p 8080:80 developapp

FINALLY ACCESS APACHE WEBSITE WHICH WAS BUILT WITH DOCKER CONTRAINER WITH PUBLIC IP OF TEST INSRANCE:8080. IF IT IS SUCCESSFUL YOU SHOULD SEE THE IMAGE.
IF NOT TROUBLESHOOT WITH FOLLOWING COMMANDS.

- Check Firewall on the Host : $sudo ufw status
- Allow the port : $sudo ufw allow 8080
- For iptables: Ensure no rule blocks the port:: $sudo iptables -L -n
- Ensure the host is reachable from your local machine:ping <host-ip>
- Test access using curl or a browser: curl http://<host-ip>:8080
- Check the Apache container logs for errors: docker logs <container-id>
- Restart Apache: service apache2 restart
- Check Port Mapping: docker ps (Look for your container and confirm that the PORTS column shows the mapping (e.g., 0.0.0.0:8080->80/tcp).)

#############################################################################
STEP6: Creating Job2 with the help of master branch use following steps

- Go to Jenkins and create new Item "job2" select freestyle and fillout following parameters to create pipeline. 

Select GitHub project > Select Master branch and copy and Enter Project url https://github.com/asyedabdul/website.git/
Select Restrict where this project can be run> in Label Expression select EC2 instance or Environment that is test in secoond pipeline and 
prod in third where you want to run this pipeline.
In SourceCodeManagement Select Git> Repository URL same thing as above https://github.com/asyedabdul/website.git
credentials are "none"
In BranchestoBuild > Branch Specifier (blank for 'any')>*/master (as you building from master branch)
Select GitHub hook trigger for GITScm polling in Triggers since WEBHOOK are already created in first step it applies
to all repository so you dont need to create WEBHOOKS in this step.

In Build Steps> Select Execute shell and Following script at Build job (container) 
NOTE: You have to allow 8082 in inbound security rules on instance level on test EC2 instance.

  - this command to remove previously built containers or else it will throw error port already in use.
sudo docker rm -f $(sudo docker ps -a -q) 
sudo docker build /home/ubuntu/jenkins/workspace/job2 -t prodapp
sudo docker run -it -d -p 8081:80 prodapp

FINALLY ACCESS APACHE WEBSITE WHICH WAS BUILT WITH DOCKER CONTRAINER WITH PUBLIC IP OF TEST INSRANCE:8080. IF IT IS SUCCESSFUL YOU SHOULD SEE THE IMAGE.
IF NOT TROUBLESHOOT WITH FOLLOWING COMMANDS.

##############################################################################
STEP7: Creating Job3 with the help of master branch use following steps

- Go to Jenkins and create new Item "job3" select freestyle and fillout following parameters to create pipeline. 

Select GitHub project > Select Master branch and copy and Enter Project url https://github.com/asyedabdul/website.git/
Select Restrict where this project can be run> In Label Expression select EC2 instance or Environment that is prod in third pipeline and 
where you want to run this pipeline.
In SourceCodeManagement Select Git> Repository URL same thing as above https://github.com/asyedabdul/website.git
credentials are "none"
In BranchestoBuild > Branch Specifier (blank for 'any')>*/master (as you building from master branch)
Select GitHub hook trigger for GITScm polling in Triggers since WEBHOOK are already created in first step it applies
to all repository so you dont need to create WEBHOOKS in this step.

In Build Steps> Select Execute shell and Following script at Build job (container) 
NOTE: You have to allow 8083 in inbound security rules on instance level on test EC2 instance.

 - this command to remove previously built containers or else it will throw error port already in use.
sudo docker rm -f $(sudo docker ps -a -q)
sudo docker build /home/ubuntu/jenkins/workspace/job3 -t finalapp
sudo docker run -it -d -p 8082:80 finalapp

FINALLY ACCESS APACHE WEBSITE WHICH WAS BUILT WITH DOCKER CONTRAINER WITH PUBLIC IP OF TEST INSRANCE:8080. IF IT IS SUCCESSFUL YOU SHOULD SEE THE IMAGE.
IF NOT TROUBLESHOOT WITH FOLLOWING COMMANDS.

finally you can go to JOB2 and go to configure and go to bottom to select "Post-build Actions" to run Job3. That means JOb3 is dependant on Job2 run. 




  
	

